import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;


public class TicketReservation_1 extends javax.swing.JFrame {
    DefaultTableModel model;
    DefaultTableModel model_2;
    
    // Creates new form TicketReservation 
    public TicketReservation_1() {
        initComponents();
        this.setLocationRelativeTo(null);

        model = (DefaultTableModel) TransitTable.getModel();
        model_2 = (DefaultTableModel) CancelTable.getModel();
        
        btnConfirmCancel.setEnabled(false);
        returnDate.setEnabled(false);
        passenger2.setText("none");
        passenger3.setText("none");
        passenger4.setText("none");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnHome = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel117 = new javax.swing.JLabel();
        jLabel118 = new javax.swing.JLabel();
        jLabel119 = new javax.swing.JLabel();
        jLabel120 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TransitTable = new javax.swing.JTable();
        jLabel121 = new javax.swing.JLabel();
        btnChkTransport = new javax.swing.JButton();
        origin = new javax.swing.JComboBox<>();
        tranMethod = new javax.swing.JComboBox<>();
        destination = new javax.swing.JComboBox<>();
        jLabel122 = new javax.swing.JLabel();
        tripType = new javax.swing.JComboBox<>();
        jLabel123 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        ticketClass = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        amtTickets = new javax.swing.JComboBox<>();
        jPanel42 = new javax.swing.JPanel();
        jLabel112 = new javax.swing.JLabel();
        jLabel113 = new javax.swing.JLabel();
        jLabel114 = new javax.swing.JLabel();
        jLabel115 = new javax.swing.JLabel();
        jLabel116 = new javax.swing.JLabel();
        passenger1 = new javax.swing.JTextField();
        passenger2 = new javax.swing.JTextField();
        passenger3 = new javax.swing.JTextField();
        passenger4 = new javax.swing.JTextField();
        btnTicketReview = new javax.swing.JButton();
        departDate = new javax.swing.JFormattedTextField();
        returnDate = new javax.swing.JFormattedTextField();
        jLabel124 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        btnConfirmCancel = new javax.swing.JButton();
        btnReservationSearch = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        CancelTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(10, 10, 10, 10, new java.awt.Color(179, 0, 0)));

        jLabel1.setFont(new java.awt.Font("SimSun-ExtB", 0, 48)); // NOI18N
        jLabel1.setText("Ticket Reservation");

        btnHome.setBackground(new java.awt.Color(204, 0, 0));
        btnHome.setFont(new java.awt.Font("SimSun", 0, 18)); // NOI18N
        btnHome.setText("Home");
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnHome, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(276, 276, 276)
                .addComponent(jLabel1)
                .addContainerGap(409, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnHome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(9, 6, 1250, 70));

        jTabbedPane1.setFont(new java.awt.Font("SimSun", 2, 14)); // NOI18N

        jPanel3.setBorder(javax.swing.BorderFactory.createMatteBorder(5, 5, 5, 5, new java.awt.Color(179, 0, 0)));

        jLabel117.setFont(new java.awt.Font("SimSun-ExtB", 0, 18)); // NOI18N
        jLabel117.setText("Origin");

        jLabel118.setFont(new java.awt.Font("SimSun-ExtB", 0, 18)); // NOI18N
        jLabel118.setText("Destination");

        jLabel119.setFont(new java.awt.Font("SimSun-ExtB", 0, 18)); // NOI18N
        jLabel119.setText("Departure Date ");

        jLabel120.setFont(new java.awt.Font("SimSun-ExtB", 0, 18)); // NOI18N
        jLabel120.setText("Return Date");

        TransitTable.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        TransitTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Transit ID", "Station", "Company", "Origin", "Destination", "Departure Time", "Arrival Time", "Fare"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TransitTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(TransitTable);
        if (TransitTable.getColumnModel().getColumnCount() > 0) {
            TransitTable.getColumnModel().getColumn(0).setResizable(false);
            TransitTable.getColumnModel().getColumn(1).setResizable(false);
            TransitTable.getColumnModel().getColumn(2).setResizable(false);
            TransitTable.getColumnModel().getColumn(3).setResizable(false);
            TransitTable.getColumnModel().getColumn(4).setResizable(false);
            TransitTable.getColumnModel().getColumn(5).setResizable(false);
            TransitTable.getColumnModel().getColumn(6).setResizable(false);
            TransitTable.getColumnModel().getColumn(7).setResizable(false);
        }

        jLabel121.setFont(new java.awt.Font("SimSun-ExtB", 0, 18)); // NOI18N
        jLabel121.setText("Trip Type");

        btnChkTransport.setBackground(new java.awt.Color(204, 0, 0));
        btnChkTransport.setFont(new java.awt.Font("SimSun", 1, 24)); // NOI18N
        btnChkTransport.setText("Check Transports");
        btnChkTransport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChkTransportActionPerformed(evt);
            }
        });

        origin.setFont(new java.awt.Font("SimSun-ExtB", 0, 15)); // NOI18N
        origin.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pick a location", " ", "--California", "Los Angeles", "San Francisco", "San Diego", "Bakersfield", " ", "-- Nevada", "Las Vegas", "Henderson", " ", "-- Texas", "Houston", "Dallas", " ", "-- Utah", "Salt Lake City", "St. George" }));

        tranMethod.setFont(new java.awt.Font("SimSun-ExtB", 0, 15)); // NOI18N
        tranMethod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bus", "Train", "Plane" }));

        destination.setFont(new java.awt.Font("SimSun-ExtB", 0, 15)); // NOI18N
        destination.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pick a location", " ", "--California", "Los Angeles", "San Francisco", "San Diego", "Bakersfield", " ", "-- Nevada", "Las Vegas", "Henderson", " ", "-- Texas", "Houston", "Dallas", " ", "-- Utah", "Salt Lake City", "St. George" }));

        jLabel122.setFont(new java.awt.Font("SimSun-ExtB", 0, 18)); // NOI18N
        jLabel122.setText("Transit Method");

        tripType.setFont(new java.awt.Font("SimSun-ExtB", 0, 15)); // NOI18N
        tripType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "One Way", "Roundtrip" }));
        tripType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tripTypeActionPerformed(evt);
            }
        });

        jLabel123.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel123.setText("Date Format: mm/dd/yyyy");

        jPanel4.setBorder(javax.swing.BorderFactory.createMatteBorder(5, 5, 5, 5, new java.awt.Color(179, 0, 0)));

        ticketClass.setFont(new java.awt.Font("SimSun-ExtB", 0, 18)); // NOI18N
        ticketClass.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Economy", "Business", "First Class" }));

        jLabel18.setFont(new java.awt.Font("SimSun-ExtB", 0, 18)); // NOI18N
        jLabel18.setText("Ticket Class");

        jLabel21.setFont(new java.awt.Font("SimSun-ExtB", 0, 18)); // NOI18N
        jLabel21.setText("No. of passengers");

        jLabel15.setFont(new java.awt.Font("SimSun-ExtB", 0, 24)); // NOI18N
        jLabel15.setText("Ticket Details");

        amtTickets.setFont(new java.awt.Font("SimSun-ExtB", 0, 18)); // NOI18N
        amtTickets.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4" }));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel18)
                            .addComponent(jLabel21))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(amtTickets, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ticketClass, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addGap(22, 22, 22)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(ticketClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(amtTickets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jPanel42.setBorder(javax.swing.BorderFactory.createMatteBorder(5, 5, 5, 5, new java.awt.Color(179, 0, 0)));

        jLabel112.setFont(new java.awt.Font("SimSun-ExtB", 0, 24)); // NOI18N
        jLabel112.setText("Passenger Names");

        jLabel113.setFont(new java.awt.Font("SimSun-ExtB", 0, 18)); // NOI18N
        jLabel113.setText("Passenger 1");

        jLabel114.setFont(new java.awt.Font("SimSun-ExtB", 0, 18)); // NOI18N
        jLabel114.setText("Passenger 2");

        jLabel115.setFont(new java.awt.Font("SimSun-ExtB", 0, 18)); // NOI18N
        jLabel115.setText("Passenger 3");

        jLabel116.setFont(new java.awt.Font("SimSun-ExtB", 0, 18)); // NOI18N
        jLabel116.setText("Passenger 4");

        passenger1.setFont(new java.awt.Font("SimSun-ExtB", 0, 18)); // NOI18N

        passenger2.setFont(new java.awt.Font("SimSun-ExtB", 0, 18)); // NOI18N

        passenger3.setFont(new java.awt.Font("SimSun-ExtB", 0, 18)); // NOI18N

        passenger4.setFont(new java.awt.Font("SimSun-ExtB", 0, 18)); // NOI18N

        btnTicketReview.setBackground(new java.awt.Color(204, 0, 0));
        btnTicketReview.setFont(new java.awt.Font("SimSun", 1, 24)); // NOI18N
        btnTicketReview.setText("Review Booking");
        btnTicketReview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTicketReviewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel42Layout = new javax.swing.GroupLayout(jPanel42);
        jPanel42.setLayout(jPanel42Layout);
        jPanel42Layout.setHorizontalGroup(
            jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel42Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel112)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel42Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel116)
                    .addComponent(jLabel115)
                    .addGroup(jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel113, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel114, javax.swing.GroupLayout.Alignment.TRAILING)))
                .addGroup(jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel42Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passenger2)
                            .addComponent(passenger3)
                            .addComponent(passenger1)))
                    .addGroup(jPanel42Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(passenger4)))
                .addGap(14, 14, 14))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel42Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnTicketReview, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel42Layout.setVerticalGroup(
            jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel42Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel112)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel113)
                    .addComponent(passenger1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel114)
                    .addComponent(passenger2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel115)
                    .addComponent(passenger3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel116)
                    .addComponent(passenger4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnTicketReview, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                .addContainerGap())
        );

        departDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("MM/dd/yyyy"))));
        departDate.setFont(new java.awt.Font("SimSun-ExtB", 0, 18)); // NOI18N

        returnDate.setFont(new java.awt.Font("SimSun-ExtB", 0, 18)); // NOI18N

        jLabel124.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel124.setText("Roundtrip note: returning trip times are the same as the first trip");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(186, 186, 186)
                        .addComponent(jLabel123))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabel117)
                        .addGap(18, 18, 18)
                        .addComponent(origin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(jLabel118)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(destination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(jLabel119)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(departDate, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel120)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(returnDate, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 819, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel124)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnChkTransport))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(276, 276, 276)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel122)
                            .addComponent(jLabel121))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tranMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tripType, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel42, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel42, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel122)
                            .addComponent(tranMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tripType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel121))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(origin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel117)
                            .addComponent(jLabel118)
                            .addComponent(destination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel119)
                            .addComponent(jLabel120)
                            .addComponent(departDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(returnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel123, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnChkTransport)
                            .addComponent(jLabel124, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 14, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Book a Trip", jPanel3);

        jLabel2.setFont(new java.awt.Font("SimSun-ExtB", 0, 18)); // NOI18N
        jLabel2.setText("Enter your booking code:");

        jTextField1.setFont(new java.awt.Font("SimSun", 0, 18)); // NOI18N

        btnConfirmCancel.setBackground(new java.awt.Color(204, 0, 0));
        btnConfirmCancel.setFont(new java.awt.Font("SimSun", 1, 24)); // NOI18N
        btnConfirmCancel.setForeground(new java.awt.Color(255, 255, 255));
        btnConfirmCancel.setText("Confirm Cancellation");
        btnConfirmCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmCancelActionPerformed(evt);
            }
        });

        btnReservationSearch.setBackground(new java.awt.Color(204, 0, 0));
        btnReservationSearch.setFont(new java.awt.Font("SimSun", 1, 24)); // NOI18N
        btnReservationSearch.setText("View Reservation");
        btnReservationSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReservationSearchActionPerformed(evt);
            }
        });

        jScrollPane3.setFont(new java.awt.Font("SimSun", 0, 36)); // NOI18N

        CancelTable.setFont(new java.awt.Font("SimSun", 0, 17)); // NOI18N
        CancelTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Booking ID", "Transit ID", "Station", "Transit Line", "Origin", "Destination", "Departure Time", "Arrival Time", "Total", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        CancelTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(CancelTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(btnReservationSearch)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(386, 386, 386)
                .addComponent(btnConfirmCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(516, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReservationSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(84, 84, 84)
                .addComponent(btnConfirmCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
        );

        jTabbedPane1.addTab("Ticket Cancellation", jPanel2);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(9, 79, 1250, 510));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Takes user back to home page
    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnHomeActionPerformed

    private void btnTicketReviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTicketReviewActionPerformed
        String departureDate = departDate.getText();
        String client1 = passenger1.getText();
        String client2 = passenger2.getText();
        String client3 = passenger3.getText();
        String client4 = passenger4.getText();

        if (client1.isEmpty() || client2.isEmpty() || client3.isEmpty() || client4.isEmpty() || departureDate.isEmpty()) { 
            JOptionPane.showMessageDialog(this,
                    "Make sure all valid fields are filled out", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        else { // SEND REGISTRATION INFORMATION TO SQL DATABASE AND RETURN TO LOGIN PAGE
            TicketReservation_2 trs2 = new TicketReservation_2();
            trs2.tripType_2.setText(tripType.getSelectedItem().toString());
            trs2.tranMethod_2.setText(tranMethod.getSelectedItem().toString());
            trs2.departDate_2.setText(departDate.getText());

            if (tripType.getSelectedItem() == "One Way"){
                trs2.returnDate_2.setText("none");
            }
            else {
                trs2.returnDate_2.setText(returnDate.getText());
            }

            trs2.ticketClass_2.setText(ticketClass.getSelectedItem().toString());
            trs2.amtTickets_2.setText(amtTickets.getSelectedItem().toString());

            trs2.dispPass1.setText(passenger1.getText());
            trs2.dispPass2.setText(passenger2.getText());
            trs2.dispPass3.setText(passenger3.getText());
            trs2.dispPass4.setText(passenger4.getText());

            int index = TransitTable.getSelectedRow();
            TableModel model = TransitTable.getModel();
                trs2.transitID_2.setText(model.getValueAt(index, 0).toString());
                trs2.station_2.setText(model.getValueAt(index, 1).toString());
                trs2.company_2.setText(model.getValueAt(index, 2).toString());
                trs2.origin_2.setText(model.getValueAt(index, 3).toString());
                trs2.destination_2.setText(model.getValueAt(index, 4).toString());
                trs2.departTime_2.setText(model.getValueAt(index, 5).toString());
                trs2.arriveTime_2.setText(model.getValueAt(index, 6).toString());
                trs2.fare_2.setText(model.getValueAt(index, 7).toString());

            trs2.setVisible(true);
            trs2.pack();
            this.dispose();    
        }   
    }//GEN-LAST:event_btnTicketReviewActionPerformed

    // CHECK DATABASE FOR AVAILABLE TRANSPORT BASED ON TRANSPORT METHODS AND DESTINATIONS
    private void btnChkTransportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChkTransportActionPerformed
        if (tranMethod.getSelectedItem() == "Bus") {
 
            if (origin.getSelectedItem() == "Los Angeles" && destination.getSelectedItem() == "San Francisco") {
                DefaultTableModel model = (DefaultTableModel) TransitTable.getModel();
                model.setRowCount(0);
                
                model.insertRow(model.getRowCount(), new Object[]{1108, "Grand Park", "Megabus", "Los Angeles",
                    "San Francisco", "5:30 am", "3:30 pm", 7});
                model.insertRow(model.getRowCount(), new Object[]{1106, "Tefusa", "MegaBus", "Los Angeles",
                    "San Francisco", "6:45 am", "5:30 pm", 7});
                model.insertRow(model.getRowCount(), new Object[]{1107, "LA Union", "Greyhound", "Los Angeles",
                    "San Francisco", "7:15 am", "6:00 pm", 15});
                model.insertRow(model.getRowCount(), new Object[]{1107, "LA Union", "Greyhound", "Los Angeles",
                    "San Francisco", "11:15 am", "7:00 pm", 15});
                model.insertRow(model.getRowCount(), new Object[]{1108, "LA Union", "Flixbus", "Los Angeles",
                    "San Francisco", "1:30 pm", "9:15 pm", 15});
            }
            
            if (origin.getSelectedItem() == "Los Angeles" && destination.getSelectedItem() == "San Diego") {
                DefaultTableModel model = (DefaultTableModel) TransitTable.getModel();
                model.setRowCount(0);
                
                model.insertRow(model.getRowCount(), new Object[]{1167, "Tefusa", "Megasbus", "Los Angeles",
                    "San Diego", "7:45 am", "11:15 am", 5});
                model.insertRow(model.getRowCount(), new Object[]{1168, "LA Union", "Greyhound", "Los Angeles",
                    "San Diego", "8:30 am", "1:00 pm", 20});
                model.insertRow(model.getRowCount(), new Object[]{1169, "LA Union", "Greyhound", "Los Angeles",
                    "San Diego", "7:15 pm", "10:45 pm", 20});
            }
            
            if (origin.getSelectedItem() == "San Diego" && destination.getSelectedItem() == "Los Angeles") {
                DefaultTableModel model = (DefaultTableModel) TransitTable.getModel();
                model.setRowCount(0);
                
                model.insertRow(model.getRowCount(), new Object[]{1132, "Old Town", "Greyhound", "San Diego",
                    "Los Angeles", "8:30 am", "1:15 pm", 20});
                model.insertRow(model.getRowCount(), new Object[]{1133, "Old Town", "Greyound", "San Diego",
                    "Los Angeles", "10:45 am", "1:15 pm", 20});
                model.insertRow(model.getRowCount(), new Object[]{1134, "La Jolla", "FlixBus", "San Diego",
                    "Los Angeles", "1:30 am", "4:00 pm", 20});
                model.insertRow(model.getRowCount(), new Object[]{1135, "La Jolla", "FlixBus", "San Diego",
                    "Los Angeles", "3:45 am", "6:15 pm", 20});            
            }
            
            if (origin.getSelectedItem() == "Los Angeles" && destination.getSelectedItem() == "Bakersfield") {
                DefaultTableModel model = (DefaultTableModel) TransitTable.getModel();
                model.setRowCount(0);
                
                model.insertRow(model.getRowCount(), new Object[]{1176, "Tefusa", "Megabus", "Los Angeles",
                    "Bakersfield", "5:30 am", "8:15 am", 7});
                model.insertRow(model.getRowCount(), new Object[]{1177, "LA Union", "Greyhound", "Los Angeles",
                    "Bakersfield", "12:15 pm", "3:00 pm", 12});
                model.insertRow(model.getRowCount(), new Object[]{1178, "LA Union", "FlixBus", "Los Angeles",
                    "Bakersfield", "3:00 pm", "6:00 pm", 12});
            }
            
            if (origin.getSelectedItem() == "Bakersfield" && destination.getSelectedItem() == "Los Angeles") {
                DefaultTableModel model = (DefaultTableModel) TransitTable.getModel();
                model.setRowCount(0);
                
                model.insertRow(model.getRowCount(), new Object[]{1208, "Park & Ride", "Megabus", "Bakersfield",
                    "Los Angeles", "7:30 am", "10:15 am", 7});
                model.insertRow(model.getRowCount(), new Object[]{1209, "Truxton Ave", "Greyhound", "Bakersfield",
                    "Los Angeles", "11:45 am", "3:00 pm", 12});
                model.insertRow(model.getRowCount(), new Object[]{1210, "Truxton Ave", "FlixBus", "Bakersfield",
                    "Los Angeles", "2:00 pm", "4:45 pm", 12});
            }
            
            if (origin.getSelectedItem() == "Los Angeles" && destination.getSelectedItem() == "Las Vegas") {
                DefaultTableModel model = (DefaultTableModel) TransitTable.getModel();
                model.setRowCount(0);
                
                model.insertRow(model.getRowCount(), new Object[]{1245, "Tefusa", "Megabus", "Los Angeles",
                    "Las Vegas", "7:30 am", "1:15 pm", 8});
                model.insertRow(model.getRowCount(), new Object[]{1246, "LA Union", "Grehound", "Los Angeles",
                    "Las Vegas", "9:00 am", "2:45 pm", 20});
                model.insertRow(model.getRowCount(), new Object[]{1246, "LA Union", "Grehound", "Los Angeles",
                    "Las Vegas", "1:15 pm", "7:00 pm", 20});
                model.insertRow(model.getRowCount(), new Object[]{1247, "LA Union", "FlixBus", "Los Angeles",
                    "Las Vegas", "12:45 pm", "6:00 pm", 20});
            }
            
            if (origin.getSelectedItem() == "Las Vegas" && destination.getSelectedItem() == "Los Angeles") {
                DefaultTableModel model = (DefaultTableModel) TransitTable.getModel();
                model.setRowCount(0);
                
                model.insertRow(model.getRowCount(), new Object[]{1297, "F.Show Mall", "Megabus", "Las Vegas",
                    "Los Angeles", "8:30 am", "2:15 pm", 12});
                model.insertRow(model.getRowCount(), new Object[]{1298, "South Strip", "Greyhound", "Las Vegas",
                    "Los Angeles", "10:45 am", "4:30 pm", 35});
                model.insertRow(model.getRowCount(), new Object[]{1298, "South Strip", "Greyhound", "Las Vegas",
                    "Los Angeles", "12:15 pm", "6:00 pm", 35});
                model.insertRow(model.getRowCount(), new Object[]{1299, "Caesar's Palace", "FlixBus", "Las Vegas",
                    "Los Angeles", "2:00 pm", "7:30 pm", 35});
            }
            
            if (origin.getSelectedItem() == "Houston" && destination.getSelectedItem() == "Dallas") {
                DefaultTableModel model = (DefaultTableModel) TransitTable.getModel();
                model.setRowCount(0);
                
                model.insertRow(model.getRowCount(), new Object[]{1310, "Hillcroft", "Megabus", "Houston",
                    "Dallas", "7:30 am", "12:45 pm", 30});
                model.insertRow(model.getRowCount(), new Object[]{1311, "Hillcroft", "Megabus", "Houston",
                    "Dallas", "8:30 am", "12:30 pm", 30});
                model.insertRow(model.getRowCount(), new Object[]{1311, "Hillcroft", "Megabus", "Houston",
                    "Dallas", "9:45 am", "1:30 pm", 30});
                model.insertRow(model.getRowCount(), new Object[]{1311, "Hillcroft", "Megabus", "Houston",
                    "Dallas", "11:15 am", "2:45 pm", 30});
                model.insertRow(model.getRowCount(), new Object[]{1312, "Hillcroft", "Megabus", "Houston",
                    "Dallas", "12:45 pm", "5:15 pm", 30});
            }
            
            if (origin.getSelectedItem() == "Dallas" && destination.getSelectedItem() == "Houston") {
                DefaultTableModel model = (DefaultTableModel) TransitTable.getModel();
                model.setRowCount(0);
                
                model.insertRow(model.getRowCount(), new Object[]{1310, "Grand Prairie", "Megabus", "Dallas",
                    "Houston", "8:30 am", "1:30 pm", 30});
                model.insertRow(model.getRowCount(), new Object[]{1311, "Grand Prairie", "Megabus", "Dallas",
                    "Houston", "10:15 am", "2:00 pm", 30});
                model.insertRow(model.getRowCount(), new Object[]{1312, "Grand Prairie", "Megabus", "Dallas",
                    "Houston", "11:15 am", "2:45 pm", 30});
                model.insertRow(model.getRowCount(), new Object[]{1311, "Grand Prairie", "Megabus", "Dallas",
                    "Houston", "12:30 am", "4:45 pm", 30});
                model.insertRow(model.getRowCount(), new Object[]{1312, "Grand Prairie", "Megabus", "Dallas",
                    "Houston", "2:00 am", "6:00 pm", 30});
            }
            
        }
        
        
        // TRAIN SCHEDULES
        if (tranMethod.getSelectedItem() == "Train") {
        
            if (origin.getSelectedItem() == "Los Angeles" && destination.getSelectedItem() == "San Diego") {
                DefaultTableModel model = (DefaultTableModel) TransitTable.getModel();
                model.setRowCount(0);
                
                model.insertRow(model.getRowCount(), new Object[]{3010, "LA Union", "AmTrak", "Los Angeles",
                    "San Diego", "6:15 am", "8:45 am", 35});
                model.insertRow(model.getRowCount(), new Object[]{3011, "LA Union", "AmTrak", "Los Angeles",
                    "San Diego", "7:15 am", "9:15 am", 35});
                model.insertRow(model.getRowCount(), new Object[]{3012, "LA Union", "Amtrak", "Los Angeles",
                    "San Diego", "10:15 am", "1:00 pm", 35});
                model.insertRow(model.getRowCount(), new Object[]{3012, "LA Union", "Amtrak", "Los Angeles",
                    "San Diego", "11:45 am", "5:00 pm", 35});
                model.insertRow(model.getRowCount(), new Object[]{3012, "LA Union", "Amtrak", "Los Angeles",
                    "San Diego", "12:15 pm", "2:45 pm", 35});
                model.insertRow(model.getRowCount(), new Object[]{3012, "LA Union", "Amtrak", "Los Angeles",
                    "San Diego", "3:30 pm", "6:00 pm", 35});
            }
            
            if (origin.getSelectedItem() == "San Diego" && destination.getSelectedItem() == "Los Angeles") {
                DefaultTableModel model = (DefaultTableModel) TransitTable.getModel();
                model.setRowCount(0);
                
                model.insertRow(model.getRowCount(), new Object[]{3054, "Santa Fe", "AmTrak", "San Diego",
                    "Los Angeles", "9:30 am", "11:30 pm", 35});
                model.insertRow(model.getRowCount(), new Object[]{3055, "Old Town", "AmTrak", "San Diego",
                    "Los Angeles", "10:30 am", "4:15 pm", 35});
                model.insertRow(model.getRowCount(), new Object[]{3056, "Santa Fe", "Amtrak", "San Diego",
                    "Los Angeles", "11:45 am", "4:45 pm", 35});
                model.insertRow(model.getRowCount(), new Object[]{3055, "Old Town", "AmTrak", "San Diego",
                    "Los Angeles", "1:00 pm", "7:30 pm", 35});
                model.insertRow(model.getRowCount(), new Object[]{3056, "Old Town", "Amtrak", "San Diego",
                    "Los Angeles", "4:15 pm", "6:45 pm", 35});
            }

            if (origin.getSelectedItem() == "Los Angeles" && destination.getSelectedItem() == "Las Vegas") {
                DefaultTableModel model = (DefaultTableModel) TransitTable.getModel();
                model.setRowCount(0);
                
                model.insertRow(model.getRowCount(), new Object[]{3081, "LA Union", "AmTrak", "Los Angeles",
                    "Las Vegas", "8:18 am", "7:30 pm", 86});
                model.insertRow(model.getRowCount(), new Object[]{3081, "LA Union", "AmTrak", "Los Angeles",
                    "Las Vegas", "10:15 pm", "9:45 pm", 86});
                model.insertRow(model.getRowCount(), new Object[]{3081, "LA Union", "AmTrak", "Los Angeles",
                    "Las Vegas", "2:30 am", "11:15 am", 86});
                
            }
            
            if (origin.getSelectedItem() == "Los Angeles" && destination.getSelectedItem() == "Salt Lake City") {
                DefaultTableModel model = (DefaultTableModel) TransitTable.getModel();
                model.setRowCount(0);
                
                model.insertRow(model.getRowCount(), new Object[]{3110, "LA Union", "AmTrak", "Salt Lake City",
                    "Los Angeles", "9:45 am", "3:00 am", 98});
                model.insertRow(model.getRowCount(), new Object[]{3111, "LA Union", "AmTrak", "Salt Lake City",
                    "Los Angeles", "4:45 pm", "10:00 am", 98});
            }

        }

        
        if (tranMethod.getSelectedItem() == "Plane") {
            if (origin.getSelectedItem() == "Los Angeles" && destination.getSelectedItem() == "Las Vegas") {
                DefaultTableModel model = (DefaultTableModel) TransitTable.getModel();
                model.setRowCount(0);
                
                model.insertRow(model.getRowCount(), new Object[]{3110, "LAX", "Delta", "Los Angeles",
                    "Las Vegas", "9:45 am", "3:00 am", 67});
                model.insertRow(model.getRowCount(), new Object[]{3111, "LAX", "Delta", "Los Angeles",
                    "Las Vegas", "4:45 pm", "10:00 am", 70});
                model.insertRow(model.getRowCount(), new Object[]{3111, "LAX", "Spirit", "Los Angeles",
                    "Las Vegas", "4:45 pm", "10:00 am", 70});
            }
            
            if (origin.getSelectedItem() == "Las Vegas" && destination.getSelectedItem() == "Houston") {
                DefaultTableModel model = (DefaultTableModel) TransitTable.getModel();
                model.setRowCount(0);
                
                model.insertRow(model.getRowCount(), new Object[]{3110, "LAX", "Delta", "Las Vegas",
                    "Houston", "9:30 am", "12:15 pm", 88});
                model.insertRow(model.getRowCount(), new Object[]{3111, "LAX", "Volaris", "Las Vegas",
                    "Houston", "4:45 pm", "8:00 am", 76});
            }

            if (origin.getSelectedItem() == "Los Angeles" && destination.getSelectedItem() == "Salt Lake City") {
                DefaultTableModel model = (DefaultTableModel) TransitTable.getModel();
                model.setRowCount(0);
                
                model.insertRow(model.getRowCount(), new Object[]{3110, "LAX", "Spirit", "Los Angeles",
                    "Salt Lake City", "9:45 am", "12:00 pm", 98});
                model.insertRow(model.getRowCount(), new Object[]{3111, "LAX", "Spirit", "Los Angeles",
                    "Salt Lake City", "4:45 pm", "10:00 am", 98});
                model.insertRow(model.getRowCount(), new Object[]{3111, "LAX", "Volaris", "Los Angeles",
                    "Salt Lake City", "4:45 pm", "10:00 am", 98});
            }
            
            if (origin.getSelectedItem() == "Los Angeles" && destination.getSelectedItem() == "Houston") {
                DefaultTableModel model = (DefaultTableModel) TransitTable.getModel();
                model.setRowCount(0);
                
                model.insertRow(model.getRowCount(), new Object[]{3110, "LAX", "Delta", "Los Angeles",
                    "Houston", "8:30 am", "12:00 pm", 98});
                model.insertRow(model.getRowCount(), new Object[]{3111, "LAX", "Delta", "Los Angeles",
                    "Houston", "1:45 pm", "5:00 pm", 98});
            }
        }
        
        
       
    }//GEN-LAST:event_btnChkTransportActionPerformed

    // Enables and disables the return date option depending on trip type
    private void tripTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tripTypeActionPerformed
        if (tripType.getSelectedItem() == "One Way"){
            returnDate.setEnabled(false);
        }
        else {
            returnDate.setEnabled(true);
        }
    }//GEN-LAST:event_tripTypeActionPerformed

    // Checks Booking History databse for corresponding booking id
    private void btnReservationSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReservationSearchActionPerformed
        btnConfirmCancel.setEnabled(true);
    }//GEN-LAST:event_btnReservationSearchActionPerformed

    // Refunds the user's money and sets the booking status to CANCELLED
    private void btnConfirmCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmCancelActionPerformed
        JOptionPane.showMessageDialog(this,
                    "Your reservation has been successfully cancelled and your payment has been refunded");
        btnConfirmCancel.setEnabled(false);
    }//GEN-LAST:event_btnConfirmCancelActionPerformed

 
    public static void main(String args[]) {
        // Create and display the form
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TicketReservation_1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CancelTable;
    private javax.swing.JTable TransitTable;
    private javax.swing.JComboBox<String> amtTickets;
    private javax.swing.JButton btnChkTransport;
    private javax.swing.JButton btnConfirmCancel;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnReservationSearch;
    private javax.swing.JButton btnTicketReview;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JFormattedTextField departDate;
    public javax.swing.JComboBox<String> destination;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel112;
    private javax.swing.JLabel jLabel113;
    private javax.swing.JLabel jLabel114;
    private javax.swing.JLabel jLabel115;
    private javax.swing.JLabel jLabel116;
    private javax.swing.JLabel jLabel117;
    private javax.swing.JLabel jLabel118;
    private javax.swing.JLabel jLabel119;
    private javax.swing.JLabel jLabel120;
    private javax.swing.JLabel jLabel121;
    private javax.swing.JLabel jLabel122;
    private javax.swing.JLabel jLabel123;
    private javax.swing.JLabel jLabel124;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    public javax.swing.JComboBox<String> origin;
    private javax.swing.JTextField passenger1;
    private javax.swing.JTextField passenger2;
    private javax.swing.JTextField passenger3;
    private javax.swing.JTextField passenger4;
    private javax.swing.JFormattedTextField returnDate;
    private javax.swing.JComboBox<String> ticketClass;
    public javax.swing.JComboBox<String> tranMethod;
    public javax.swing.JComboBox<String> tripType;
    // End of variables declaration//GEN-END:variables
}
